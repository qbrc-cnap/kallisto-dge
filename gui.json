{
	"input_elements": [
		{
			"target": {
				"target_ids": ["KallistoAndSleuthWorkflow.r1_files", "KallistoAndSleuthWorkflow.r2_files"],
				"name": "input_files",
				"handler": "input_mapping.py"
			},
			"display_element": {
				"type": "file_chooser",
                "regex_filter": ".*_R[1,2].fastq.gz",
				"label": "Input files:",
				"choose_multiple": true,
				"description": "Choose input fastq-format files to analyze.  Files should end with \"_R1.fastq.gz\" or \"_R2.fastq.gz\".  Unpaired files will be ignored and NOT analyzed."
			}	
		},
		{
			"target": {
				"target_ids": ["KallistoAndSleuthWorkflow.sample_annotations"],
				"name": "annotations_input",
				"handler": "single_file_input_mapping.py"
			},
			"display_element": {
				"type": "file_chooser",
                "regex_filter": ".*",
				"label": "Sample annotations:",
				"choose_multiple": false,
				"description": "Choose a sample annotation file.  This should have two columns, separated by a \"tab\" (tab-delimited).  The first has the sample names, which need to match the \"prefix\" of the fastq files you will be using.  For example, if the fastq file is named \"SampleA_R1.fastq.gz\", then the sample name that goes in this file is \"SampleA\".  The second column tells us which experimental group (e.g. phenotype, treatment, condition) the sample belongs to.  The names of the groups NEED to match the values you enter below for the base and experimental groups.  There should NOT be a column header.  An example may be found <a href=\"https://storage.cloud.google.com/cnap-test-files/deseq2/samples.tsv\">here</a>"
			}	
		},
		{
			"target": {
				"target_ids": ["KallistoAndSleuthWorkflow.genome", 
					"KallistoAndSleuthWorkflow.kallisto_index_path", 
					"KallistoAndSleuthWorkflow.transcript_to_gene_mapping"
				],
				"name": "genome_choice",
				"handler": "genome_mapper.py"
			},
			"display_element": {
				"type": "select",
				"label": "Reference genome",
				"description": "Choose the reference genome to use for this process.",
				"choices": [
					{
						"value": "Ensembl Homo sapiens GRCh38.95",
						"display": "Ensembl Homo sapiens GRCh38.95"
					},
					{
						"value": "Ensembl Mus musculus GRCm38.95",
						"display": "Ensembl Mus musculus GRCm38.95"
					},
					{
						"value":"PDx Hybrid: Ensembl Mus musculus GRCm38.95 + Homo sapiens GRCh38.95",
						"display":"PDx Hybrid: Ensembl Mus musculus GRCm38.95 + Homo sapiens GRCh38.95"
					}
				]
			}
		},
		{
			"display_element": {
				"type": "boolean_checkbox",
				"label": "Is patient-derived xenograft",
				"description": "Please check if the sample is a patient-derived xenograft mouse model."
			},
			"target": "KallistoAndSleuthWorkflow.is_pdx"
		},

		{
			"target": {
				"target_ids": [
					"KallistoAndSleuthWorkflow.base_conditions", 
					"KallistoAndSleuthWorkflow.experimental_conditions"
				],
				"name": "contrast_grid",
				"handler": "condition_mapper.py"
			},
			"display_element": {
				"type": "dynamic_input_grid",
				"label": "Differential expression contrasts",
				"description": "Choose which groups to compare when performing simple differential expression.  Add as many contrasts as you like.  Note that the name of the contrast groups must exactly match those provided in the sample annotation file.",
				"columns": ["Base condition", "Experimental condition"]
			}
		},
		{
			"target":"KallistoAndSleuthWorkflow.output_zip_name",
			"display_element": {
				"type": "text",
				"label": "Output zip-archive name:",
				"description": "Name the output file.  Result will be a \"zip\" archive.  If you enter \"my_output\", then the results will be \"my_output.zip\"."
			}
		},
		{
			"target": "KallistoAndSleuthWorkflow.git_repo_url",
			"display_element": {
				"type": "dynamic_hidden",
				"handler": "add_git_repo_url.py",
				"context_args": {
					"variable_name": "git_repo_url"
				}
			}
		},
		{
			"target": "KallistoAndSleuthWorkflow.git_commit_hash",
			"display_element": {
				"type": "dynamic_hidden",
				"handler": "add_git_hash.py",
				"context_args": {
					"variable_name": "git_commit_hash"
				}
			}
		}
	]
}
